% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_fun.R
\name{pattern_gettr}
\alias{pattern_gettr}
\title{pattern_gettr}
\usage{
pattern_gettr(
  word_,
  vct,
  occ = c(1),
  strict,
  btwn,
  all_in_word = "yes",
  notatall = "###"
)
}
\arguments{
\item{word_}{is the vector containing the patterns}

\item{vct}{is the vector being searched for patterns}

\item{occ}{a vector containing the occurence of the pattern in word_ to be matched in the vector being searched, if the occurence is 2 for the nth pattern in word_ and only one occurence is found in vct so no pattern will be matched, put "forever" to no longer depend on the occurence for the associated pattern}

\item{strict}{a vector containing the "strict" condition for each nth vector in word_ ("strict" is the string to activate this option)}

\item{btwn}{is a vector containing the condition ("yes" to activate this option) meaning that if "yes", all elements between two matched patern in vct will be returned , so the patterns you enter in word_ have to be in the order you think it will appear in vct}

\item{all_in_word}{is a value (default set to "yes", "no" to activate this option) that, if activated, won't authorized a previous matched pattern to be matched again}

\item{notatall}{is a string that you are sure is not present in vct}
}
\description{
Search for pattern(s) contained in a vector in another vector and return a list containing matched one (first index) and their position (second index) according to these rules: First case: Search for patterns strictly, it means that the searched pattern(s) will be matched only if the patterns containded in the vector that is beeing explored by the function are present like this c("pattern_searched", "other", ..., "pattern_searched") and not as c("other_thing pattern_searched other_thing", "other", ..., "pattern_searched other_thing")
Second case: It is the opposite to the first case, it means that if the pattern is partially present like in the first position and the last, it will be considered like a matched pattern. REGEX can also be used as pattern
}
\examples{

print(pattern_gettr(word_=c("oui", "non", "erer"), vct=c("oui", "oui", "non", "oui", 
 "non", "opp", "opp", "erer", "non", "ok"), occ=c(1, 2, 1), 
 btwn=c("no", "yes", "no"), strict=c("no", "no", "ee")))

#[[1]]
#[1] 1 5 8
#
#[[2]]
#[1] "oui"  "non"  "opp"  "opp"  "erer"

}
